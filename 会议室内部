import struct
import sys

from PyQt5.QtCore import pyqtSignal, QThread
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QHBoxLayout, QFrame, QLabel, QListWidget, \
    QMessageBox, QLineEdit, QTextEdit


# 获取会议列表的接口
class MeetingAPI:
    @staticmethod
    def get_meeting_list():
        # 从服务器获取会议列表
        return ["会议1", "会议2", "会议3","新建会议"]

        # 模拟从服务器获取会议列表
        # 这里我们使用一个固定的URL来模拟服务器端点
        # url = "https://api.example.com/meetings"
        #
        # # 发送GET请求到服务器
        # try:
        #     response = requests.get(url)
        #     response.raise_for_status()  # 检查请求是否成功
        #     meetings = response.json()  # 假设服务器返回的是JSON数据
        #     return meetings
        # except requests.RequestException as e:
        #     print(f"请求失败：{e}")
        #     return []

class VideoConferenceApp(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('视频会议系统')
        self.setGeometry(700, 400, 800, 600)   # 正中间

        # 创建布局
        layout = QVBoxLayout()

        # 创建会议按钮
        create_meeting_btn = QPushButton('创建会议')
        create_meeting_btn.clicked.connect(self.onCreateMeeting)
        layout.addWidget(create_meeting_btn)

        # 加入会议按钮
        join_meeting_btn = QPushButton('加入会议')
        join_meeting_btn.clicked.connect(self.onJoinMeeting)
        layout.addWidget(join_meeting_btn)

        # 设置布局
        self.setLayout(layout)

    def onCreateMeeting(self):
        # 创建视频会议窗口
        self.create_meeting = CreateMeetingDialog()
        self.create_meeting.show()
        self.hide()

    def onJoinMeeting(self):
        # 创建加入会议列表窗口
        self.join_meeting_list = JoinMeetingList()
        self.join_meeting_list.show()
        self.hide()

#输入创建会议的信息的窗口
class CreateMeetingDialog(QWidget):
    meeting_created = pyqtSignal(str)  # 创建会议的信号，传递会议名称

    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('创建会议')
        self.setGeometry(700, 400, 300, 150)  # 正中间

        layout = QVBoxLayout()

        # 创建会议名称输入框
        self.meeting_name_edit = QLineEdit(self)
        layout.addWidget(self.meeting_name_edit)

        # 完成按钮
        finish_btn = QPushButton('完成')
        finish_btn.clicked.connect(self.onFinish)
        layout.addWidget(finish_btn)

        self.setLayout(layout)

    def onFinish(self):
        meeting_name = self.meeting_name_edit.text()
        if meeting_name:  # 检查是否输入了会议名称

            #填写对名称传输的逻辑

            self.meeting_room = MeetingRoom1()
            self.meeting_room.show()
            self.close()  # 关闭窗口
        else:
            QMessageBox.warning(self, '警告', '请输入会议名称')

#会议室（创建者版本）：可以结束会议
class MeetingRoom1(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('视频会议房间')
        self.setGeometry(100, 100, 1280, 720)

        # 创建主布局
        main_layout = QVBoxLayout(self)  #QVBoxLayout作为主布局

        # 创建视频区域
        video_layout = QHBoxLayout()
        video_frame = QFrame()
        video_frame.setFrameShape(QFrame.StyledPanel)
        video_layout.addWidget(video_frame, 10)  # 用10作为拉伸因子，用来占据大部分空间
        self.video_area = video_frame  # 视频播放区域

        # 创建聊天框区域
        chat_layout = QVBoxLayout()
        chat_frame = QFrame()
        chat_frame.setFrameShape(QFrame.StyledPanel)
        chat_layout.addWidget(chat_frame)
        chat_layout.addStretch(1)  # 添加弹性空间
        self.chat_area = chat_frame  # 聊天框区域

        # 添加视频区域和聊天框到主布局
        main_layout.addLayout(video_layout)
        main_layout.addLayout(chat_layout, 1)  # 较小空间

        # 创建底部控制栏
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(10)

        # 麦克风按钮
        self.mic_btn = QPushButton('开启麦克风')
        self.mic_btn.clicked.connect(self.onMicClick)
        bottom_layout.addWidget(self.mic_btn)

        # 摄像头按钮
        self.cam_btn = QPushButton('开启摄像头')
        self.cam_btn.clicked.connect(self.onCamClick)
        bottom_layout.addWidget(self.cam_btn)

        # 结束会议按钮
        self.end_meeting_btn = QPushButton('结束会议')
        self.end_meeting_btn.clicked.connect(self.onEndMeeting)
        bottom_layout.addWidget(self.end_meeting_btn)

        # 将底部控制栏添加到主布局
        main_layout.addLayout(bottom_layout)

        # 设置布局的间距和对齐方式
        main_layout.setStretchFactor(video_layout, 10)
        main_layout.setStretchFactor(chat_layout, 2)
        main_layout.setContentsMargins(0, 0, 0, 0)  # 移除默认的外边距
        bottom_layout.setContentsMargins(0, 0, 0, 0)  # 移除默认的外边距

        # 创建文本框用于输出信息
        self.info_text_edit = QTextEdit()
        self.info_text_edit.setReadOnly(True)
        main_layout.addWidget(self.info_text_edit)

    def onEndMeeting(self):
        # 结束会议逻辑
        self.close()
        # self.parent().show()  # 如果有父窗口，可以取消注释这行
        # QApplication.quit()

    def onMicClick(self):
        # 开启麦克风逻辑
        if self.mic_btn.text() == '开启麦克风':
            print("开启麦克风按钮被点击")
            self.mic_btn.setText('关闭麦克风')
            self.appendText("麦克风已开启")         #仅用于证明文本框有效
        else:
            print("关闭麦克风按钮被点击")
            self.mic_btn.setText('开启麦克风')
            self.appendText("麦克风已关闭")

    def onCamClick(self):
        # 开启摄像头逻辑
        if self.cam_btn.text() == '开启摄像头':
            print("开启摄像头按钮被点击")
            self.cam_btn.setText('关闭摄像头')
        else:
            # 关闭摄像头逻辑
            print("关闭摄像头按钮被点击")
            self.cam_btn.setText('开启摄像头')

    def appendText(self, text):
        # 将接收到的信息添加到文本框中
        self.info_text_edit.append(text)

#会议室（加入者版本）：只能退出会议
class MeetingRoom2(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('视频会议房间')
        self.setGeometry(100, 100, 1280, 720)  # 可以根据需要调整大小

        # 创建主布局
        main_layout = QVBoxLayout(self)  # 使用 QVBoxLayout 作为主布局

        # 创建视频区域
        video_layout = QHBoxLayout()
        video_frame = QFrame()
        video_frame.setFrameShape(QFrame.StyledPanel)
        video_layout.addWidget(video_frame, 10)  # 使用10作为拉伸因子，使其占据大部分空间
        self.video_area = video_frame  # 视频播放区域

        # 创建聊天框区域
        chat_layout = QVBoxLayout()
        chat_frame = QFrame()
        chat_frame.setFrameShape(QFrame.StyledPanel)
        chat_layout.addWidget(chat_frame)
        chat_layout.addStretch(1)  # 添加弹性空间，使其适应剩余空间
        self.chat_area = chat_frame  # 聊天框区域

        # 添加视频区域和聊天框到主布局
        main_layout.addLayout(video_layout)
        main_layout.addLayout(chat_layout, 1)  # 较小空间

        # 创建底部控制栏
        bottom_layout = QHBoxLayout()
        bottom_layout.setSpacing(10)

        # 麦克风按钮
        self.mic_btn = QPushButton('开启麦克风')
        self.mic_btn.clicked.connect(self.onMicClick)
        bottom_layout.addWidget(self.mic_btn)

        # 摄像头按钮
        self.cam_btn = QPushButton('开启摄像头')
        self.cam_btn.clicked.connect(self.onCamClick)
        bottom_layout.addWidget(self.cam_btn)

        # 结束会议按钮
        self.end_meeting_btn = QPushButton('退出会议')
        self.end_meeting_btn.clicked.connect(self.onEndMeeting)
        bottom_layout.addWidget(self.end_meeting_btn)

        # 将底部控制栏添加到主布局
        main_layout.addLayout(bottom_layout)

        # 设置布局的间距和对齐方式
        main_layout.setStretchFactor(video_layout, 10)
        main_layout.setStretchFactor(chat_layout, 2)
        main_layout.setContentsMargins(0, 0, 0, 0)  # 移除默认的外边距
        bottom_layout.setContentsMargins(0, 0, 0, 0)  # 移除默认的外边距

        # 创建文本框用于输出信息
        self.info_text_edit = QTextEdit()
        self.info_text_edit.setReadOnly(True)
        main_layout.addWidget(self.info_text_edit)

    def onEndMeeting(self):
        # 退出会议逻辑
        self.close()
        # self.parent().show()  # 如果有父窗口，可以取消注释这行
        # QApplication.quit()

    def onMicClick(self):
        # 开启麦克风逻辑
        if self.mic_btn.text() == '开启麦克风':
            print("开启麦克风按钮被点击")
            self.mic_btn.setText('关闭麦克风')
            self.appendText("麦克风已开启")  # 仅用于证明文本框有效
        else:
            print("关闭麦克风按钮被点击")
            self.mic_btn.setText('开启麦克风')
            self.appendText("麦克风已关闭")

    def onCamClick(self):
        # 开启摄像头逻辑
        if self.cam_btn.text() == '开启摄像头':
            print("开启摄像头按钮被点击")
            self.cam_btn.setText('关闭摄像头')
        else:
            # 关闭摄像头逻辑
            print("关闭摄像头按钮被点击")
            self.cam_btn.setText('开启摄像头')

    def appendText(self, text):
        # 预留方法，用于将接收到的信息添加到文本框中
        self.info_text_edit.append(text)

# 加入会议列表界面(选择后进入加入者版会议室）
class JoinMeetingList(QWidget):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle('加入会议列表')
        self.setGeometry(100, 100, 400, 600)

        # 创建布局
        layout = QVBoxLayout()

        # 会议列表按钮容器
        self.meeting_buttons = []

        # 获取会议列表并创建按钮
        meeting_list = MeetingAPI.get_meeting_list()
        for meeting in meeting_list:
            button = QPushButton(meeting)
            button.clicked.connect(self.onMeetingSelected)
            layout.addWidget(button)
            self.meeting_buttons.append(button)

        # 返回按钮
        back_btn = QPushButton('返回')
        back_btn.clicked.connect(self.onBack)
        layout.addWidget(back_btn)

        # 设置布局
        self.setLayout(layout)

    def onMeetingSelected(self):
        # 处理选择会议后的逻辑
        self.meeting_room = MeetingRoom2()
        self.meeting_room.show()
        self.close()  # 关闭当前窗口

    def onBack(self):
        # 返回视频会议系统主界面
        self.close()
        self.parent().show()


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = VideoConferenceApp()
    ex.show()
    sys.exit(app.exec_())
